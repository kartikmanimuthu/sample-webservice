version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing Packer..."
      - wget https://releases.hashicorp.com/packer/1.11.2/packer_1.11.2_linux_amd64.zip
      - unzip packer_1.11.2_linux_amd64.zip
      - mv packer /usr/local/bin/
      - packer version

  pre_build:
    commands:
      - echo "Pre-build phase started on $(date)"
      - echo "Current directory $(pwd)"
      - echo "Listing files:"
      - ls -la
      - echo "Installing jq for JSON parsing"
      - yum install -y jq
      - echo "Initializing Packer plugins..."
      - packer init packer-template.pkr.hcl

  build:
    commands:
      - echo "Build phase started on $(date)"
      - echo "Current directory $(pwd)"
      - echo "Validating Packer template..."
      - |
        packer validate \
          -var "project_name=$PROJECT_NAME" \
          -var "environment=$ENVIRONMENT" \
          -var "region=$AWS_DEFAULT_REGION" \
          -var "vpc_id=$VPC_ID" \
          -var "subnet_id=$SUBNET_ID" \
          -var "security_group_id=$SECURITY_GROUP_ID" \
          -var "instance_profile=$INSTANCE_PROFILE" \
          packer-template.pkr.hcl
      - echo "Building AMI with Packer..."
      - |
        packer build -machine-readable \
          -var "project_name=$PROJECT_NAME" \
          -var "environment=$ENVIRONMENT" \
          -var "region=$AWS_DEFAULT_REGION" \
          -var "vpc_id=$VPC_ID" \
          -var "subnet_id=$SUBNET_ID" \
          -var "security_group_id=$SECURITY_GROUP_ID" \
          -var "instance_profile=$INSTANCE_PROFILE" \
          packer-template.pkr.hcl | tee packer.log

        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "ERROR: Packer build failed!"
          cat packer.log
          exit 1
        fi
      - echo "Extracting AMI ID from Packer output..."
      - |
        # Try multiple methods to extract AMI ID
        AMI_ID=""

        # Method 1: From machine-readable output
        if [ -z "$AMI_ID" ]; then
          AMI_ID=$(grep 'artifact,0,id' packer.log | cut -d, -f6 | cut -d: -f2 | tail -1)
        fi

        # Method 2: From manifest.json if it exists
        if [ -z "$AMI_ID" ] && [ -f "manifest.json" ]; then
          AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json 2>/dev/null | cut -d: -f2)
        fi

        # Method 3: From packer output using regex
        if [ -z "$AMI_ID" ]; then
          AMI_ID=$(grep -o 'ami-[a-z0-9]*' packer.log | tail -1)
        fi

        if [ -z "$AMI_ID" ]; then
          echo "ERROR: Failed to extract AMI ID from Packer output"
          echo "Packer log contents:"
          cat packer.log
          echo "Manifest contents (if exists):"
          cat manifest.json 2>/dev/null || echo "No manifest.json found"
          exit 1
        fi

        echo "AMI_ID=$AMI_ID" > ami.env
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ami.env
        echo "BUILD_TOOL=Packer" >> ami.env
        echo "Successfully extracted AMI ID: $AMI_ID"

artifacts:
  files:
    - "ami.env"
    - "manifest.json"
    - "codedeploy-buildspec.yml"
  name: packer-artifacts

cache:
  paths:
    - "/usr/local/bin/packer"
