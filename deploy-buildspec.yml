version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing AWS CLI and dependencies..."
      - pip3 install awscli boto3 --upgrade

  pre_build:
    commands:
      - echo "Pre-deploy phase started on $(date)"
      - echo "Current directory: $(pwd)"
      - echo "Listing files:"
      - ls -la
      - echo "Environment variables:"
      - echo "  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
      - echo "  PROJECT_NAME: $PROJECT_NAME"
      - echo "  ENVIRONMENT: $ENVIRONMENT"
      - echo "  LAUNCH_TEMPLATE_ID: $LAUNCH_TEMPLATE_ID"
      - echo "  ASG_NAME: $ASG_NAME"
      - |
        if [ -f "sample-app/ami.env" ]; then
          echo "Loading AMI ID from build artifacts..."
          source sample-app/ami.env
          echo "AMI_ID found: $AMI_ID"
        elif [ -f "sample-app/manifest.json" ]; then
          echo "Loading AMI ID from manifest..."
          AMI_ID=$(jq -r '.builds[0].artifact_id' sample-app/manifest.json | cut -d':' -f2)
          echo "AMI ID from manifest: $AMI_ID"
        else
          echo "ERROR: No AMI ID found in artifacts"
          exit 1
        fi
      - |
        if [ -z "$AMI_ID" ]; then
          echo "ERROR: AMI_ID is empty"
          exit 1
        fi
      - echo "AMI ID to deploy: $AMI_ID"

  build:
    commands:
      - echo "Deploy phase started on $(date)"
      - echo "Updating launch template with new AMI..."
      - |
        # Get current launch template version
        CURRENT_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --query 'LaunchTemplateVersions[0].VersionNumber' \
          --output text)
        echo "Current launch template version: $CURRENT_VERSION"
      - |
        # Create new launch template version with new AMI
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --source-version $CURRENT_VERSION \
          --launch-template-data '{"ImageId":"'$AMI_ID'"}' \
          --query 'LaunchTemplateVersion.VersionNumber' \
          --output text)
        echo "Created new launch template version: $NEW_VERSION"
      - |
        # Update ASG to use new launch template version
        echo "Updating Auto Scaling Group to use new launch template version..."
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION
        echo "Auto Scaling Group updated successfully"
      - |
        # Start instance refresh for rolling deployment
        echo "Starting instance refresh for rolling deployment..."
        REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME \
          --preferences MinHealthyPercentage=90,InstanceWarmup=300 \
          --query 'InstanceRefreshId' \
          --output text)
        echo "Instance refresh started with ID: $REFRESH_ID"
      - echo "Deployment completed successfully"

artifacts:
  files:
    - "*.log"
  name: deploy-artifacts
