version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing AWS CLI and dependencies..."
      - pip3 install awscli boto3 --upgrade
      - echo "Installing jq..."
      - yum install -y jq

  pre_build:
    commands:
      - echo "Pre-deploy phase started on $(date)"
      - echo "Current directory $(pwd)"
      - echo "Listing files-"
      - ls -la
      - echo "Environment variables-"
      - echo "  AWS_DEFAULT_REGION - $AWS_DEFAULT_REGION"
      - echo "  PROJECT_NAME - $PROJECT_NAME"
      - echo "  ENVIRONMENT - $ENVIRONMENT"
      - echo "  LAUNCH_TEMPLATE_ID - $LAUNCH_TEMPLATE_ID"
      - echo "  ASG_NAME - $ASG_NAME"
      - |
        # Validate required environment variables
        if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
          echo "ERROR: LAUNCH_TEMPLATE_ID is not set"
          exit 1
        fi
        if [ -z "$ASG_NAME" ]; then
          echo "ERROR: ASG_NAME is not set"
          exit 1
        fi
      - |
        # Extract AMI ID from artifacts
        AMI_ID=""
        echo "Checking for AMI artifacts..."
        echo "Files in current directory:"
        ls -la

        if [ -f "ami.env" ]; then
          echo "Found ami.env file, reading contents..."
          cat ami.env
          echo "Extracting AMI_ID from ami.env..."
          AMI_ID=$(grep -E "^AMI_ID=" ami.env | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
          echo "AMI_ID extracted from ami.env: '$AMI_ID'"
        fi

        # Fallback to manifest.json if ami.env didn't work
        if [ -z "$AMI_ID" ] && [ -f "manifest.json" ]; then
          echo "AMI_ID not found in ami.env, trying manifest.json..."
          cat manifest.json
          AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json 2>/dev/null | cut -d':' -f2)
          echo "AMI_ID extracted from manifest.json: '$AMI_ID'"
        fi

        # Final validation
        if [ -z "$AMI_ID" ] || [ "$AMI_ID" = "null" ]; then
          echo "ERROR - No valid AMI_ID found in artifacts"
          echo "Contents of ami.env (if exists):"
          cat ami.env 2>/dev/null || echo "ami.env not readable"
          echo "Contents of manifest.json (if exists):"
          cat manifest.json 2>/dev/null || echo "manifest.json not readable"
          exit 1
        fi

        echo "Successfully extracted AMI_ID: $AMI_ID"
      - |
        if [ -z "$AMI_ID" ] || [ "$AMI_ID" = "null" ]; then
          echo "ERROR - AMI_ID is empty or null"
          echo "Contents of ami.env-"
          cat ami.env 2>/dev/null || echo "ami.env not found"
          echo "Contents of manifest.json-"
          cat manifest.json 2>/dev/null || echo "manifest.json not found"
          exit 1
        fi
      - echo "Validated AMI ID to deploy - $AMI_ID"

  build:
    commands:
      - echo "Deploy phase started on $(date)"
      - echo "Verifying AMI exists and is available..."
      - |
        # Verify AMI exists and is available
        AMI_STATE=$(aws ec2 describe-images \
          --image-ids $AMI_ID \
          --query 'Images[0].State' \
          --output text 2>/dev/null)

        if [ "$AMI_STATE" != "available" ]; then
          echo "ERROR - AMI $AMI_ID is not available (state - $AMI_STATE)"
          exit 1
        fi
        echo "AMI $AMI_ID is available for deployment"
      - echo "Updating launch template with new AMI..."
      - |
        # Check current IAM permissions first
        echo "Checking IAM permissions..."
        CALLER_IDENTITY=$(aws sts get-caller-identity --query 'Arn' --output text 2>/dev/null || echo "Unable to get caller identity")
        echo "Current IAM identity: $CALLER_IDENTITY"

        # Try to describe the launch template to verify access
        echo "Verifying launch template access..."
        LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --launch-template-ids $LAUNCH_TEMPLATE_ID --query 'LaunchTemplates[0].LaunchTemplateName' --output text 2>/dev/null || echo "null")
        if [ "$LAUNCH_TEMPLATE_NAME" = "null" ]; then
          echo "ERROR - Cannot access launch template $LAUNCH_TEMPLATE_ID"
          echo "Required permissions: ec2:DescribeLaunchTemplates, ec2:CreateLaunchTemplateVersion"
          exit 1
        fi
        echo "Launch template access verified: $LAUNCH_TEMPLATE_NAME"
      - |
        # Get current launch template version
        CURRENT_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --query 'LaunchTemplateVersions[0].VersionNumber' \
          --output text)

        if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "None" ]; then
          echo "ERROR - Failed to get current launch template version"
          exit 1
        fi
        echo "Current launch template version: $CURRENT_VERSION"
      - |
        # Create new launch template version with new AMI
        echo "Creating new launch template version with AMI - $AMI_ID"
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --source-version $CURRENT_VERSION \
          --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
          --query 'LaunchTemplateVersion.VersionNumber' \
          --output text 2>&1)

        if [ $? -ne 0 ]; then
          echo "ERROR - Failed to create new launch template version"
          echo "AWS CLI output: $NEW_VERSION"
          echo "Required permissions: ec2:CreateLaunchTemplateVersion"
          exit 1
        fi

        if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "None" ]; then
          echo "ERROR - Invalid launch template version returned: $NEW_VERSION"
          exit 1
        fi
        echo "Created new launch template version: $NEW_VERSION"
      - |
        # Verify ASG access before attempting update
        echo "Verifying Auto Scaling Group access..."
        ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].AutoScalingGroupName' \
          --output text 2>/dev/null || echo "null")

        if [ "$ASG_EXISTS" != "$ASG_NAME" ]; then
          echo "ERROR - Cannot access Auto Scaling Group $ASG_NAME"
          echo "Required permissions: autoscaling:DescribeAutoScalingGroups, autoscaling:UpdateAutoScalingGroup"
          exit 1
        fi
        echo "Auto Scaling Group access verified"
      - |
        # Update ASG to use new launch template version
        echo "Updating Auto Scaling Group to use new launch template version..."
        UPDATE_RESULT=$(aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION 2>&1)

        if [ $? -ne 0 ]; then
          echo "ERROR - Failed to update Auto Scaling Group"
          echo "AWS CLI output: $UPDATE_RESULT"
          echo "Common causes:"
          echo "  1. Missing IAM permission: autoscaling:UpdateAutoScalingGroup"
          echo "  2. Missing IAM permission: iam:PassRole (for launch template)"
          echo "  3. Missing IAM permission: ec2:RunInstances (for launch template)"
          echo "Current IAM identity: $CALLER_IDENTITY"
          exit 1
        fi
        echo "Auto Scaling Group updated successfully"
      - |
        # Verify the update was successful
        echo "Verifying Auto Scaling Group update..."
        CURRENT_LT_VERSION=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].LaunchTemplate.Version' \
          --output text)

        if [ "$CURRENT_LT_VERSION" != "$NEW_VERSION" ]; then
          echo "WARNING - ASG launch template version mismatch"
          echo "Expected: $NEW_VERSION, Actual: $CURRENT_LT_VERSION"
        else
          echo "ASG successfully updated to use launch template version $NEW_VERSION"
        fi
      - |
        # Start instance refresh for rolling deployment
        echo "Starting instance refresh for rolling deployment..."
        REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME \
          --preferences '{
            "InstanceWarmup": 300,
            "MinHealthyPercentage": 50,
            "CheckpointDelay": 600,
            "CheckpointPercentages": [50, 100]
          }' \
          --query 'InstanceRefreshId' \
          --output text)

        if [ -z "$REFRESH_ID" ] || [ "$REFRESH_ID" = "null" ]; then
          echo "ERROR - Failed to start instance refresh"
          exit 1
        fi
        echo "Instance refresh started with ID - $REFRESH_ID"

        # Save deployment info
        echo "REFRESH_ID=$REFRESH_ID" > deployment.env
        echo "AMI_ID=$AMI_ID" >> deployment.env
        echo "NEW_VERSION=$NEW_VERSION" >> deployment.env
        echo "DEPLOYMENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment.env
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> deployment.env
        echo "ASG_NAME=$ASG_NAME" >> deployment.env
      - echo "Deployment completed successfully"

artifacts:
  files:
    - "deployment.env"
    - "*.log"
  name: deploy-artifacts
