version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing AWS CLI and dependencies..."
      - pip3 install awscli boto3 --upgrade

  pre_build:
    commands:
      - echo "Pre-deploy phase started on $(date)"
      - echo "Current directory: $(pwd)"
      - echo "Listing files:"
      - ls -la
      - echo "Environment variables:"
      - echo "  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
      - echo "  PROJECT_NAME: $PROJECT_NAME"
      - echo "  ENVIRONMENT: $ENVIRONMENT"
      - echo "  LAUNCH_TEMPLATE_ID: $LAUNCH_TEMPLATE_ID"
      - echo "  ASG_NAME: $ASG_NAME"
      - |
        if [ -f "${CODEBUILD_SOURCE_VERSION}.env" ]; then
          echo "Loading AMI ID from build artifacts..."
          source ${CODEBUILD_SOURCE_VERSION}.env
          echo "AMI_ID found: $AMI_ID"
        else
          echo "No AMI ID file found, checking for manifest.json..."
          if [ -f "manifest.json" ]; then
            AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json | cut -d':' -f2)
            echo "AMI ID from manifest: $AMI_ID"
          else
            echo "ERROR: No AMI ID found in artifacts"
            exit 1
          fi
        fi
      - |
        if [ -z "$AMI_ID" ]; then
          echo "ERROR: AMI_ID is empty"
          exit 1
        fi
      - echo "AMI ID to deploy: $AMI_ID"

  build:
    commands:
      - echo "Deploy phase started on $(date)"
      - echo "Updating launch template with new AMI..."
      - |
        # Get current launch template version
        CURRENT_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --query 'LaunchTemplateVersions[0].VersionNumber' \
          --output text)
        echo "Current launch template version: $CURRENT_VERSION"

      - |
        # Create new launch template version with new AMI
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id $LAUNCH_TEMPLATE_ID \
          --source-version $CURRENT_VERSION \
          --launch-template-data '{"ImageId":"'$AMI_ID'"}' \
          --query 'LaunchTemplateVersion.VersionNumber' \
          --output text)
        echo "Created new launch template version: $NEW_VERSION"

      - |
        # Update ASG to use new launch template version
        echo "Updating Auto Scaling Group to use new launch template version..."
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION
        echo "Auto Scaling Group updated successfully"

      - |
        # Start instance refresh for rolling deployment
        echo "Starting instance refresh for rolling deployment..."
        REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME \
          --preferences MinHealthyPercentage=90,InstanceWarmup=300 \
          --query 'InstanceRefreshId' \
          --output text)
        echo "Instance refresh started with ID: $REFRESH_ID"

      - |
        # Monitor instance refresh progress
        echo "Monitoring instance refresh progress..."
        REFRESH_STATUS="InProgress"
        while [ "$REFRESH_STATUS" = "InProgress" ]; do
          sleep 30
          REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --instance-refresh-ids $REFRESH_ID \
            --query 'InstanceRefreshes[0].Status' \
            --output text)
          
          PERCENTAGE=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --instance-refresh-ids $REFRESH_ID \
            --query 'InstanceRefreshes[0].PercentageComplete' \
            --output text)
          
          echo "Instance refresh status: $REFRESH_STATUS ($PERCENTAGE% complete)"
          
          if [ "$REFRESH_STATUS" = "Failed" ]; then
            echo "ERROR: Instance refresh failed"
            exit 1
          fi
          
          if [ "$REFRESH_STATUS" = "Cancelled" ]; then
            echo "ERROR: Instance refresh was cancelled"
            exit 1
          fi
        done

      - |
        if [ "$REFRESH_STATUS" = "Successful" ]; then
          echo "Instance refresh completed successfully!"
        else
          echo "Instance refresh ended with status: $REFRESH_STATUS"
          exit 1
        fi

  post_build:
    commands:
      - echo "Post-deploy phase started on $(date)"
      - |
        # Verify deployment by checking instance health
        echo "Verifying deployment health..."
        HEALTHY_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].Instances[?HealthStatus==`Healthy`]' \
          --output json | jq length)

        TOTAL_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].Instances' \
          --output json | jq length)

        echo "Healthy instances: $HEALTHY_INSTANCES/$TOTAL_INSTANCES"

        if [ "$HEALTHY_INSTANCES" -eq "$TOTAL_INSTANCES" ] && [ "$TOTAL_INSTANCES" -gt 0 ]; then
          echo "All instances are healthy - deployment successful!"
        else
          echo "WARNING: Not all instances are healthy"
        fi

      - |
        # Log deployment details
        echo "Deployment Summary:"
        echo "  Project: $PROJECT_NAME"
        echo "  Environment: $ENVIRONMENT"
        echo "  AMI ID: $AMI_ID"
        echo "  Launch Template: $LAUNCH_TEMPLATE_ID"
        echo "  New Version: $NEW_VERSION"
        echo "  ASG Name: $ASG_NAME"
        echo "  Refresh ID: $REFRESH_ID"
        echo "  Final Status: $REFRESH_STATUS"
        echo "  Healthy Instances: $HEALTHY_INSTANCES/$TOTAL_INSTANCES"

      - echo "Deploy phase completed on $(date)"

artifacts:
  files:
    - "*.log"
  name: deploy-artifacts
